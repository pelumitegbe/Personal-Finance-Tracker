// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: transactions.sql

package database

import (
	"context"
	"database/sql"
	"time"

	"github.com/google/uuid"
)

const addTransactions = `-- name: AddTransactions :exec
INSERT INTO transactions (
  id,amount,description,transaction_type,categories_id,transaction_date,created_at, updated_at
) VALUES ( $1,$2,$3,$4, $5,$6,$7,$8)
RETURNING id, amount, description, categories_id, transaction_type, transaction_date, created_at, updated_at
`

type AddTransactionsParams struct {
	ID              uuid.UUID      `json:"id"`
	Amount          string         `json:"amount"`
	Description     sql.NullString `json:"description"`
	TransactionType string         `json:"transaction_type"`
	CategoriesID    uuid.UUID      `json:"categories_id"`
	TransactionDate time.Time      `json:"transaction_date"`
	CreatedAt       time.Time      `json:"created_at"`
	UpdatedAt       time.Time      `json:"updated_at"`
}

func (q *Queries) AddTransactions(ctx context.Context, arg AddTransactionsParams) error {
	_, err := q.db.ExecContext(ctx, addTransactions,
		arg.ID,
		arg.Amount,
		arg.Description,
		arg.TransactionType,
		arg.CategoriesID,
		arg.TransactionDate,
		arg.CreatedAt,
		arg.UpdatedAt,
	)
	return err
}

const getAllTransactions = `-- name: GetAllTransactions :many
SELECT amount,transaction_type,description,categories_id,transaction_date,created_at, updated_at FROM transactions
`

type GetAllTransactionsRow struct {
	Amount          string         `json:"amount"`
	TransactionType string         `json:"transaction_type"`
	Description     sql.NullString `json:"description"`
	CategoriesID    uuid.UUID      `json:"categories_id"`
	TransactionDate time.Time      `json:"transaction_date"`
	CreatedAt       time.Time      `json:"created_at"`
	UpdatedAt       time.Time      `json:"updated_at"`
}

func (q *Queries) GetAllTransactions(ctx context.Context) ([]GetAllTransactionsRow, error) {
	rows, err := q.db.QueryContext(ctx, getAllTransactions)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetAllTransactionsRow
	for rows.Next() {
		var i GetAllTransactionsRow
		if err := rows.Scan(
			&i.Amount,
			&i.TransactionType,
			&i.Description,
			&i.CategoriesID,
			&i.TransactionDate,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
